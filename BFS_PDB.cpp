#include <iostream>
#include <fstream>
#include <chrono>
#include <vector>
#include <queue>
#include <cmath>

#include <algorithm>
#include <cstring>

#include <thread>
#include <atomic>
#include <Windows.h>

using namespace std;

static int PDB05[5765760];
static int PDB69[43680];
//need to change readPDB if want to change this

atomic<bool> findRes(false);
double usedTime;
int expNode;
vector<int> weightCount(11);

int factor(const short i, const short j) {
    int factor = 1;
    for (short k = j+1; k <= i; ++k) {
        factor *= k;
    }
    return factor;
}

void swap(short *a,short *b){
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}

int char_to_int(char *str){
    int strsize = strlen(str);
    int sumRes = 0;
    for(int i=strsize-1; i >= 0; i--){
        sumRes += int(str[i]-48) * int(pow(10, i));
    }
    return sumRes;
}


void readPDB(){
    char buffer[256];
    int i=0;

    ifstream PDB05File("../PDB05_pancake.txt");
    while(!PDB05File.eof()){
        PDB05File.getline(buffer, 100, '\n');
        PDB05[i] = char_to_int(buffer);
        //cout << PDB05[i] << endl;
        i++;
    }
    PDB05File.close();

    i=0;
    ifstream PDB69File("../PDB69_pancake.txt");
    while(!PDB69File.eof()){
        PDB69File.getline (buffer,100);
        PDB69[i] = char_to_int(buffer);
        //cout << PDB69[i] << endl;
        i++;
    }
    PDB69File.close();
}


class STPnode {
private:
	short state[16];
	short nextGcost;
	short zeroPosi;
	short generatedMethod;
	//0 for left, 1 for right, 2 for up, 3 for down;
	//all these refer to the move of zero tile
	
	STPnode switch_tile(short direction){
		short newState[16];
		for (short i = 0; i < 16; ++i){
		    newState[i] = this->state[i];
		}
		//should use vector at here for state
		short action;
		switch(direction){
			case 0: {action = -1; break;}
			case 1: {action = 1;  break;}
			case 2: {action = -4; break;}
			case 3: {action = 4;  break;}
			default: {action = -1;break;}
		}
		swap(&newState[this->zeroPosi], &newState[this->zeroPosi+action]);
		return STPnode(this->nextGcost, newState, direction);
	}

public:
    short gcost;
    int heuristic;
    int fcost;

	STPnode(short gcost, short *newState, short genMethod) {

		for (short i = 0; i < 16; ++i){
		    this->state[i] = newState[i];
		}
		this->generatedMethod = genMethod;
		
		this->gcost = gcost;
		this->nextGcost = gcost + 1;
		
		for (short i = 0; i < 16; ++i){
			if(this->state[i] == 0){
			    this->zeroPosi = i;
                break;
			}
		}

		this->heuristic = this->MD();
	}

    vector<STPnode> getNeigh(){
        vector<STPnode> neighVec;
		short zeroPosiMod = this->zeroPosi%4;
		short zeroPosiDiv = this->zeroPosi/4;
		if(zeroPosiMod != 0 && this->generatedMethod != 1){
		    //move 0 left
			neighVec.push_back(this->switch_tile(0));
			//neighVec[numNeigh].print();
		}
		if(zeroPosiMod != 3 && this->generatedMethod != 0){
		    //move 0 right
			neighVec.push_back(this->switch_tile(1));
			//neighVec[numNeigh].print();
		}
		if(zeroPosiDiv != 0 && this->generatedMethod != 3){
		    //move 0 up
			neighVec.push_back(this->switch_tile(2));
			//neighVec[numNeigh].print();
		}
		if(zeroPosiDiv != 3 && this->generatedMethod != 2){
		    //move 0 down
			neighVec.push_back(this->switch_tile(3));
			//neighVec[numNeigh].print();
		}
		return neighVec;
	}
	
	int MD(){
		//default goal, only for 0-7 PDB delta
		int result = 0;
		
		int currPosi;
		int targPosi;
		for(int i=0;i<16;i++){
			currPosi = i;
			//当前位置，具体值是目标位置 
			targPosi = this->state[i];
			//目标位置，具体值 
			if(this->state[i] == 0){continue;}
			int currx = currPosi%4;
		    int curry = currPosi/4;
		    int targx = targPosi%4;
		    int targy = targPosi/4;
		    result += abs(currx-targx) + abs(curry-targy);
		}
		
		return result;
	}
	
	void print(){
		for (short i=0; i < 4; ++i){
		    for (short j=0; j < 4; ++j){
                cout<<this->state[i*4 + j]<<" ";
                if(this->state[i*4 + j]<10) cout<<" ";
		    }
            cout<<endl;
		}
		cout<<endl;
		cout<<"---------------------"<<endl;
	}

	bool isGoal(){
	    if (this->heuristic == 0){return true;}
	    else{return false;}
	}
};

class STPnode1 {
private:
    short state[20];
    // i=4, j=5, 4 rows, 5 columns, 4行5列
    short nextGcost;
    short zeroPosi;
    short generatedMethod;
    //0 for left, 1 for right, 2 for up, 3 for down;
    //all these refer to the move of zero tile

    STPnode1 switch_tile(short direction){
        short newState[20];
        for (short i = 0; i < 20; ++i){
            newState[i] = this->state[i];
        }
        //should use vector at here for state
        short action;
        switch(direction){
            case 0: {action = -1; break;}
            case 1: {action = 1;  break;}
            case 2: {action = -5; break;}
            case 3: {action = 5;  break;}
            default: {action = -1;break;}
            // change to next row need to -5 or +5 because 5 number in a row
        }
        swap(&newState[this->zeroPosi], &newState[this->zeroPosi+action]);
        return STPnode1(this->nextGcost, newState, direction);
    }

public:

    short gcost;
    short heuristic;
    short fcost;

    STPnode1(short gcost, short *newState, short genMethod) {

        for (short i = 0; i < 20; ++i){
            this->state[i] = newState[i];
        }
        this->generatedMethod = genMethod;

        this->gcost = gcost;
        this->nextGcost = gcost + 1;

        for (short i = 0; i < 20; ++i){
            if(this->state[i] == 0){
                this->zeroPosi = i;
                break;
            }
        }

        this->heuristic = this->MD();
    }

    vector<STPnode1> getNeigh(){
        short zeroPosiMod = this->zeroPosi%5;
        //处于哪一列（0-4）
        short zeroPosiDiv = this->zeroPosi/5;
        //处于哪一行（0-3）
        vector<STPnode1> neighVec;
        if(zeroPosiMod != 0 && this->generatedMethod != 1){
            //move 0 left
            neighVec.push_back(this->switch_tile(0));
            //neighVec[numNeigh].print();
        }
        if(zeroPosiMod != 4 && this->generatedMethod != 0){
            //move 0 right
            neighVec.push_back(this->switch_tile(1));
            //neighVec[numNeigh].print();
        }
        if(zeroPosiDiv != 0 && this->generatedMethod != 3){
            //move 0 up
            neighVec.push_back(this->switch_tile(2));
            //neighVec[numNeigh].print();
        }
        if(zeroPosiDiv != 3 && this->generatedMethod != 2){
            //move 0 down
            neighVec.push_back(this->switch_tile(3));
            //neighVec[numNeigh].print();
        }
        return neighVec;
    }

    int MD(){
        //default goal, only for 0-7 PDB delta
        int result = 0;

        int currPosi;
        int targPosi;
        for(int i=0;i<20;i++){
            currPosi = i;
            //当前位置，具体值是目标位置
            targPosi = this->state[i];
            //目标位置，具体值
            if(this->state[i] == 0){continue;}
            int currx = currPosi%5;
            int curry = currPosi/5;
            int targx = targPosi%5;
            int targy = targPosi/5;
            result += abs(currx-targx) + abs(curry-targy);
        }

        return result;
    }

    void print(){
        for (short i=0; i < 4; ++i){
            for (short j=0; j < 5; ++j){
                cout<<this->state[i*5 + j]<<" ";
                if(this->state[i*5 + j]<10) cout<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
        cout<<"---------------------"<<endl;
    }

    bool isGoal(){
        if (heuristic == 0){return true;}
        else if(heuristic == 2){
            if(state[18] == 19 && state[19] == 18){return true;}
            else{return false;}
        }
        else{return false;}
    }
};

class STPnode2 {
private:
	short state[25];
	short nextGcost;
	short zeroPosi;
	short generatedMethod;
	//0 for left, 1 for right, 2 for up, 3 for down;
	//all these refer to the move of zero tile

    STPnode2 switch_tile(short direction){
		short newState[25];
		for (short i = 0; i < 25; ++i){
		    newState[i] = this->state[i];
		}
		//should use vector at here for state
		short action;
		switch(direction){
			case 0: {action = -1; break;}
			case 1: {action = 1;  break;}
			case 2: {action = -5; break;}
			case 3: {action = 5;  break;}
			default: {action = -1;break;}
		}
		swap(&newState[this->zeroPosi], &newState[this->zeroPosi+action]);
		return STPnode2(this->nextGcost, newState, direction);
	}

public:

    short gcost;
    short heuristic;
    short fcost;

	STPnode2(short gcost, short *newState, short genMethod) {

		for (short i = 0; i < 25; ++i){
		    this->state[i] = newState[i];
		}
		this->generatedMethod = genMethod;
		
		this->gcost = gcost;
		this->nextGcost = gcost + 1;
		
		for (short i = 0; i < 25; ++i){
			if(this->state[i] == 0){
			    this->zeroPosi = i;
                break;
			}
		}

        this->heuristic = this->MD();
	}

    vector<STPnode2> getNeigh(){
		short zeroPosiMod = this->zeroPosi%5;
		short zeroPosiDiv = this->zeroPosi/5;
        vector<STPnode2> neighVec;
		if(zeroPosiMod != 0 && this->generatedMethod != 1){
		    //move 0 left
			neighVec.push_back(this->switch_tile(0));
			//neighVec[numNeigh].print();
		}
		if(zeroPosiMod != 4 && this->generatedMethod != 0){
		    //move 0 right
            neighVec.push_back(this->switch_tile(1));
			//neighVec[numNeigh].print();
		}
		if(zeroPosiDiv != 0 && this->generatedMethod != 3){
		    //move 0 up
            neighVec.push_back(this->switch_tile(2));
			//neighVec[numNeigh].print();
		}
		if(zeroPosiDiv != 4 && this->generatedMethod != 2){
		    //move 0 down
            neighVec.push_back(this->switch_tile(3));
			//neighVec[numNeigh].print();
		}
		return neighVec;
	}
	
	int MD(){
		//default goal, only for 0-7 PDB delta
		int result = 0;
		
		int currPosi;
		int targPosi;
		for(int i=0;i<25;i++){
			currPosi = i;
			//当前位置，具体值是目标位置 
			targPosi = this->state[i];
			//目标位置，具体值 
			if(this->state[i] == 0){continue;}
			int currx = currPosi%5;
		    int curry = currPosi/5;
		    int targx = targPosi%5;
		    int targy = targPosi/5;
		    result += abs(currx-targx) + abs(curry-targy);
		}
		
		return result;
	}

    void print(){
        for (short i=0; i < 5; ++i){
            for (short j=0; j < 5; ++j){
                cout<<this->state[i*5 + j]<<" ";
                if(this->state[i*5 + j]<10) cout<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
        cout<<"---------------------"<<endl;
    }

    bool isGoal(){
        if (heuristic == 0){return true;}
        else if(heuristic == 2){
            for(int i=0;i<24;i++){
                if(state[i] == i+1 && state[i+1] == i){return true;}
            }
            return false;
        }
        else{return false;}
    }
};

class pancake{
private:
    short state[16];
    short nextGcost;
    short generatedMethod;

    pancake flipAction(int act){

        short newState[16];
        for(int i = 0; i < 16; i++){
            newState[i] = state[i];
        }

        int upper = 0;
        int lower = act - 1;
        int temp;

        while(upper < lower){
            temp = newState[upper];
            newState[upper] = newState[lower];
            newState[lower] = temp;
            upper++;
            lower--;
        }

        return pancake(this->nextGcost, newState, act);
    }
public:
    short gcost;
    short heuristic;
    short fcost;

    pancake(short gcost, short *newState, short genMethod){
        for(int i=0; i < 16; i++){
            state[i] = newState[i];
        }
        this->gcost = gcost;
        this->nextGcost = gcost + 1;
        this->generatedMethod = genMethod;

        this->heuristic = getHeuristic();
    }

    vector<pancake> getNeigh(){
        vector<pancake> neigh;

        for(int i = 16; i>=2; i--){
            if(i == generatedMethod) continue;
            neigh.push_back(flipAction(i));
        }

        return neigh;
    }

    int getHeuristic(){
        //get dual, fixed rank
        short dual1[6] = {0};
        short dual2[4] = {0};
        for (short i = 0; i < 16; ++i) {
            short currTile = this->state[i];
            if (currTile < 6) {
                dual1[currTile] = i;
            }
            else if(currTile >= 6 && currTile < 10){
                dual2[currTile-6] = i;
            }
        }

        //converting to mixed rank
        for (short i = 0; i < 6; ++i ) {
            for (short j = i+1; j < 6; ++j) {
                if (dual1[j] > dual1[i] && dual1[j] > 0) {
                    //cannot be equal if it's real permutation
                    --dual1[j];
                }
            }
        }
        for (short i = 0; i < 4; ++i ) {
            for (short j = i+1; j < 4; ++j) {
                if (dual2[j] > dual2[i] && dual2[j] > 0) {
                    //cannot be equal if it's real permutation
                    --dual2[j];
                }
            }
        }

        short dualProb1[6]={15, 14, 13, 12, 11, 10};
        short dualProb2[4]={15, 14, 13, 12};

        int rank1 = 0;
        for (short i = 0; i < 6; i++) {
            rank1 += dual1[i] * factor(dualProb1[i], 10);
        }
        int rank2 = 0;
        for (short i = 0; i < 4; i++) {
            rank2 += dual2[i] * factor(dualProb2[i], 12);
        }

        return max(PDB05[rank1], PDB69[rank2]);
    }

    void print(){
        for(int i=0; i < 16; i++){
            cout<<state[i]<<" ";
        }
        cout<<endl;
    }

    bool isGoal(){
        for(int i=0; i < 16; i++){
            if(state[i] != i) return false;
        }
        return true;
    }
};

short* GetPancakeInstance(int instance)
{
    int problems[100][16] = {
            {11,9,10,8,15,14,13,12,6,7,4,5,2,3,0,1},
            {8,10,9,15,12,11,14,13,6,7,4,5,2,3,0,1},
            {0,2,1,4,3,6,5,7,8,11,10,9,13,12,15,14},
            {15,12,13,14,8,10,9,11,0,2,1,3,5,4,7,6},
            {8,10,9,12,11,14,13,15,7,5,6,3,4,1,2,0},
            {0,2,1,4,3,6,5,7,8,13,10,9,12,11,15,14},
            {8,11,10,9,13,12,15,14,3,1,2,0,7,6,5,4},
            {8,9,15,13,14,11,12,10,4,2,3,1,0,7,6,5},
            {1,0,3,2,5,4,7,6,11,12,9,10,8,15,14,13},
            {7,5,6,3,4,1,2,0,12,10,11,8,9,15,14,13},
            {2,4,3,5,0,1,7,6,8,10,9,12,11,14,13,15},
            {0,1,3,2,5,4,7,6,12,13,9,10,11,8,15,14},
            {1,2,0,4,3,7,6,5,14,15,11,12,13,9,10,8},
            {4,6,5,7,1,2,3,0,13,10,11,12,8,9,15,14},
            {8,11,10,13,12,9,15,14,0,1,7,5,6,3,4,2},
            {14,15,11,12,13,9,10,8,7,4,5,6,1,2,3,0},
            {10,11,8,9,13,12,15,14,0,2,1,4,3,6,5,7},
            {2,4,3,6,5,7,0,1,8,11,10,13,12,15,14,9},
            {12,10,11,9,8,15,14,13,2,4,3,5,0,1,7,6},
            {14,15,8,10,9,12,11,13,2,0,1,5,4,3,7,6},
            {7,5,6,2,3,4,0,1,11,9,10,8,15,14,13,12},
            {10,8,9,13,12,11,15,14,6,7,4,5,1,2,3,0},
            {15,13,14,11,12,9,10,8,6,7,0,2,1,4,3,5},
            {14,15,11,12,13,9,10,8,3,4,0,2,1,7,6,5},
            {8,9,15,13,14,11,12,10,4,1,2,3,0,7,6,5},
            {4,2,3,0,1,7,6,5,9,8,12,11,10,13,15,14},
            {4,5,1,2,3,0,7,6,13,10,11,12,8,9,15,14},
            {8,15,10,9,12,11,14,13,0,5,2,1,4,3,7,6},
            {3,1,2,0,7,6,5,4,10,8,9,12,11,15,14,13},
            {0,1,3,2,5,4,7,6,8,10,9,12,11,14,13,15},
            {8,10,9,12,11,15,14,13,4,2,3,0,1,7,6,5},
            {3,1,2,0,5,4,7,6,11,9,10,8,15,14,13,12},
            {4,5,2,3,0,1,7,6,10,8,9,12,11,15,14,13},
            {0,1,3,2,5,4,7,6,8,13,10,9,12,11,15,14},
            {11,12,8,10,9,15,14,13,1,2,0,4,3,7,6,5},
            {1,0,3,2,5,4,7,6,15,12,13,14,9,10,11,8},
            {0,2,1,4,3,7,6,5,9,8,12,11,10,13,15,14},
            {1,0,4,3,2,5,7,6,14,15,11,12,13,9,10,8},
            {8,10,9,15,12,11,14,13,4,5,2,3,0,1,7,6},
            {11,9,10,8,14,13,12,15,7,4,5,6,1,2,3,0},
            {12,9,10,11,8,15,14,13,2,4,3,6,5,7,0,1},
            {13,11,12,9,10,8,15,14,5,2,3,4,0,1,7,6},
            {0,2,1,7,4,3,6,5,8,10,9,12,11,14,13,15},
            {12,13,10,11,8,9,15,14,4,1,2,3,0,7,6,5},
            {0,5,2,1,4,3,7,6,11,9,10,8,14,13,12,15},
            {0,3,2,5,4,7,6,1,11,9,10,8,15,14,13,12},
            {7,4,5,6,0,2,1,3,11,12,9,10,8,15,14,13},
            {0,2,1,4,3,7,6,5,8,9,15,13,14,11,12,10},
            {4,5,1,2,3,0,7,6,9,10,8,12,11,15,14,13},
            {4,6,5,7,1,2,3,0,10,12,11,8,9,15,14,13},
            {0,7,2,1,4,3,6,5,9,10,8,12,11,15,14,13},
            {4,6,5,7,1,2,3,0,8,10,9,11,13,12,15,14},
            {0,3,2,1,5,4,7,6,15,12,13,14,9,10,11,8},
            {1,0,4,3,2,5,7,6,8,10,9,15,12,11,14,13},
            {14,15,8,10,9,12,11,13,0,1,3,2,5,4,7,6},
            {0,2,1,4,3,6,5,7,8,10,9,12,11,14,13,15},
            {6,7,4,5,1,2,3,0,8,10,9,12,11,15,14,13},
            {1,2,0,4,3,7,6,5,10,11,8,9,13,12,15,14},
            {0,2,1,5,4,3,7,6,12,13,9,10,11,8,15,14},
            {6,7,0,2,1,4,3,5,9,8,11,10,13,12,15,14},
            {0,1,3,2,5,4,7,6,14,15,11,12,13,9,10,8},
            {0,1,7,5,6,3,4,2,9,10,8,13,12,11,15,14},
            {1,2,0,4,3,7,6,5,9,8,11,10,13,12,15,14},
            {9,8,11,10,13,12,15,14,0,2,1,3,5,4,7,6},
            {8,15,10,9,12,11,14,13,6,7,4,5,1,2,3,0},
            {10,11,8,9,13,12,15,14,6,7,3,4,5,1,2,0},
            {7,4,5,6,2,3,0,1,14,15,8,10,9,12,11,13},
            {11,12,8,10,9,15,14,13,2,3,0,1,5,4,7,6},
            {0,2,1,5,4,7,6,3,15,12,13,14,10,11,8,9},
            {8,10,9,13,12,11,15,14,1,0,3,2,5,4,7,6},
            {11,12,8,10,9,15,14,13,4,5,0,2,1,3,7,6},
            {4,5,0,2,1,3,7,6,10,12,11,14,13,15,8,9},
            {2,0,1,5,4,3,7,6,8,13,10,9,12,11,15,14},
            {11,12,9,10,8,15,14,13,6,7,4,5,2,3,0,1},
            {5,2,3,4,0,1,7,6,11,9,10,8,14,13,12,15},
            {7,4,5,6,2,3,0,1,10,12,11,14,13,15,8,9},
            {2,4,3,0,1,7,6,5,15,12,13,14,10,11,8,9},
            {8,9,11,10,13,12,15,14,0,1,3,2,5,4,7,6},
            {0,2,1,3,5,4,7,6,14,15,12,13,9,10,11,8},
            {8,9,15,13,14,11,12,10,4,6,5,7,1,2,3,0},
            {1,0,3,2,5,4,7,6,15,13,14,11,12,9,10,8},
            {5,3,4,1,2,0,7,6,8,11,10,13,12,9,15,14},
            {3,4,1,2,0,7,6,5,15,12,13,14,9,10,11,8},
            {0,1,3,2,5,4,7,6,12,10,11,9,8,15,14,13},
            {9,8,12,11,10,13,15,14,5,3,4,1,2,0,7,6},
            {2,4,3,5,0,1,7,6,12,10,11,9,8,15,14,13},
            {7,4,5,6,2,3,0,1,8,13,10,9,12,11,15,14},
            {3,1,2,0,7,6,5,4,10,12,11,8,9,15,14,13},
            {14,15,12,13,9,10,11,8,4,5,0,2,1,3,7,6},
            {0,1,7,5,6,3,4,2,10,11,8,9,13,12,15,14},
            {8,11,10,13,12,15,14,9,2,3,0,1,5,4,7,6},
            {8,10,9,12,11,13,15,14,0,5,2,1,4,3,7,6},
            {8,15,10,9,12,11,14,13,6,7,4,5,2,3,0,1},
            {10,11,8,9,13,12,15,14,6,7,4,5,2,3,0,1},
            {4,3,1,2,0,7,6,5,11,12,8,10,9,15,14,13},
            {0,1,3,2,5,4,7,6,14,15,12,13,9,10,11,8},
            {8,15,10,9,12,11,14,13,2,4,3,6,5,7,0,1},
            {12,14,13,15,9,10,11,8,4,1,2,3,0,7,6,5},
            {0,1,3,2,5,4,7,6,8,10,9,11,13,12,15,14},
            {10,8,9,13,12,11,15,14,0,2,1,3,5,4,7,6}
    };
    if (instance < 0 || instance >= 100)
        return false;
    short result[16];
    for (int x = 0; x < 16; x++)
        result[x] = problems[instance][x];
    return result;
}

short* GetSTPInstance(int instance)
{
    int problems[100][16] = {
             {14, 13, 15, 7, 11, 12, 9, 5, 6, 0, 2, 1, 4, 8, 10, 3},
             {13, 5, 4, 10, 9, 12, 8, 14, 2, 3, 7, 1, 0, 15, 11, 6},
             {14, 7, 8, 2, 13, 11, 10, 4, 9, 12, 5, 0, 3, 6, 1, 15},
             {5, 12, 10, 7, 15, 11, 14, 0, 8, 2, 1, 13, 3, 4, 9, 6},
             {4, 7, 14, 13, 10, 3, 9, 12, 11, 5, 6, 15, 1, 2, 8, 0},
             {14, 7, 1, 9, 12, 3, 6, 15, 8, 11, 2, 5, 10, 0, 4, 13},
             {2, 11, 15, 5, 13, 4, 6, 7, 12, 8, 10, 1, 9, 3, 14, 0},
             {12, 11, 15, 3, 8, 0, 4, 2, 6, 13, 9, 5, 14, 1, 10, 7},
             {3, 14, 9, 11, 5, 4, 8, 2, 13, 12, 6, 7, 10, 1, 15, 0},
             {13, 11, 8, 9, 0, 15, 7, 10, 4, 3, 6, 14, 5, 12, 2, 1},
             {5, 9, 13, 14, 6, 3, 7, 12, 10, 8, 4, 0, 15, 2, 11, 1},
             {14, 1, 9, 6, 4, 8, 12, 5, 7, 2, 3, 0, 10, 11, 13, 15},
             {3, 6, 5, 2, 10, 0, 15, 14, 1, 4, 13, 12, 9, 8, 11, 7},
             {7, 6, 8, 1, 11, 5, 14, 10, 3, 4, 9, 13, 15, 2, 0, 12},
             {13, 11, 4, 12, 1, 8, 9, 15, 6, 5, 14, 2, 7, 3, 10, 0},
             {1, 3, 2, 5, 10, 9, 15, 6, 8, 14, 13, 11, 12, 4, 7, 0},
             {15, 14, 0, 4, 11, 1, 6, 13, 7, 5, 8, 9, 3, 2, 10, 12},
             {6, 0, 14, 12, 1, 15, 9, 10, 11, 4, 7, 2, 8, 3, 5, 13},
             {7, 11, 8, 3, 14, 0, 6, 15, 1, 4, 13, 9, 5, 12, 2, 10},
             {6, 12, 11, 3, 13, 7, 9, 15, 2, 14, 8, 10, 4, 1, 5, 0},
             {12, 8, 14, 6, 11, 4, 7, 0, 5, 1, 10, 15, 3, 13, 9, 2},
             {14, 3, 9, 1, 15, 8, 4, 5, 11, 7, 10, 13, 0, 2, 12, 6},
             {10, 9, 3, 11, 0, 13, 2, 14, 5, 6, 4, 7, 8, 15, 1, 12},
             {7, 3, 14, 13, 4, 1, 10, 8, 5, 12, 9, 11, 2, 15, 6, 0},
             {11, 4, 2, 7, 1, 0, 10, 15, 6, 9, 14, 8, 3, 13, 5, 12},
             {5, 7, 3, 12, 15, 13, 14, 8, 0, 10, 9, 6, 1, 4, 2, 11},
             {14, 1, 8, 15, 2, 6, 0, 3, 9, 12, 10, 13, 4, 7, 5, 11},
             {13, 14, 6, 12, 4, 5, 1, 0, 9, 3, 10, 2, 15, 11, 8, 7},
             {9, 8, 0, 2, 15, 1, 4, 14, 3, 10, 7, 5, 11, 13, 6, 12},
             {12, 15, 2, 6, 1, 14, 4, 8, 5, 3, 7, 0, 10, 13, 9, 11},
             {12, 8, 15, 13, 1, 0, 5, 4, 6, 3, 2, 11, 9, 7, 14, 10},
             {14, 10, 9, 4, 13, 6, 5, 8, 2, 12, 7, 0, 1, 3, 11, 15},
             {14, 3, 5, 15, 11, 6, 13, 9, 0, 10, 2, 12, 4, 1, 7, 8},
             {6, 11, 7, 8, 13, 2, 5, 4, 1, 10, 3, 9, 14, 0, 12, 15},
             {1, 6, 12, 14, 3, 2, 15, 8, 4, 5, 13, 9, 0, 7, 11, 10},
             {12, 6, 0, 4, 7, 3, 15, 1, 13, 9, 8, 11, 2, 14, 5, 10},
             {8, 1, 7, 12, 11, 0, 10, 5, 9, 15, 6, 13, 14, 2, 3, 4},
             {7, 15, 8, 2, 13, 6, 3, 12, 11, 0, 4, 10, 9, 5, 1, 14},
             {9, 0, 4, 10, 1, 14, 15, 3, 12, 6, 5, 7, 11, 13, 8, 2},
             {11, 5, 1, 14, 4, 12, 10, 0, 2, 7, 13, 3, 9, 15, 6, 8},
             {8, 13, 10, 9, 11, 3, 15, 6, 0, 1, 2, 14, 12, 5, 4, 7},
             {4, 5, 7, 2, 9, 14, 12, 13, 0, 3, 6, 11, 8, 1, 15, 10},
             {11, 15, 14, 13, 1, 9, 10, 4, 3, 6, 2, 12, 7, 5, 8, 0},
             {12, 9, 0, 6, 8, 3, 5, 14, 2, 4, 11, 7, 10, 1, 15, 13},
             {3, 14, 9, 7, 12, 15, 0, 4, 1, 8, 5, 6, 11, 10, 2, 13},
             {8, 4, 6, 1, 14, 12, 2, 15, 13, 10, 9, 5, 3, 7, 0, 11},
             {6, 10, 1, 14, 15, 8, 3, 5, 13, 0, 2, 7, 4, 9, 11, 12},
             {8, 11, 4, 6, 7, 3, 10, 9, 2, 12, 15, 13, 0, 1, 5, 14},
             {10, 0, 2, 4, 5, 1, 6, 12, 11, 13, 9, 7, 15, 3, 14, 8},
             {12, 5, 13, 11, 2, 10, 0, 9, 7, 8, 4, 3, 14, 6, 15, 1},
             {10, 2, 8, 4, 15, 0, 1, 14, 11, 13, 3, 6, 9, 7, 5, 12},
             {10, 8, 0, 12, 3, 7, 6, 2, 1, 14, 4, 11, 15, 13, 9, 5},
             {14, 9, 12, 13, 15, 4, 8, 10, 0, 2, 1, 7, 3, 11, 5, 6},
             {12, 11, 0, 8, 10, 2, 13, 15, 5, 4, 7, 3, 6, 9, 14, 1},
             {13, 8, 14, 3, 9, 1, 0, 7, 15, 5, 4, 10, 12, 2, 6, 11},
             {3, 15, 2, 5, 11, 6, 4, 7, 12, 9, 1, 0, 13, 14, 10, 8},
             {5, 11, 6, 9, 4, 13, 12, 0, 8, 2, 15, 10, 1, 7, 3, 14},
             {5, 0, 15, 8, 4, 6, 1, 14, 10, 11, 3, 9, 7, 12, 2, 13},
             {15, 14, 6, 7, 10, 1, 0, 11, 12, 8, 4, 9, 2, 5, 13, 3},
             {11, 14, 13, 1, 2, 3, 12, 4, 15, 7, 9, 5, 10, 6, 8, 0},
             {6, 13, 3, 2, 11, 9, 5, 10, 1, 7, 12, 14, 8, 4, 0, 15},
             {4, 6, 12, 0, 14, 2, 9, 13, 11, 8, 3, 15, 7, 10, 1, 5},
             {8, 10, 9, 11, 14, 1, 7, 15, 13, 4, 0, 12, 6, 2, 5, 3},
             {5, 2, 14, 0, 7, 8, 6, 3, 11, 12, 13, 15, 4, 10, 9, 1},
             {7, 8, 3, 2, 10, 12, 4, 6, 11, 13, 5, 15, 0, 1, 9, 14},
             {11, 6, 14, 12, 3, 5, 1, 15, 8, 0, 10, 13, 9, 7, 4, 2},
             {7, 1, 2, 4, 8, 3, 6, 11, 10, 15, 0, 5, 14, 12, 13, 9},
             {7, 3, 1, 13, 12, 10, 5, 2, 8, 0, 6, 11, 14, 15, 4, 9},
             {6, 0, 5, 15, 1, 14, 4, 9, 2, 13, 8, 10, 11, 12, 7, 3},
             {15, 1, 3, 12, 4, 0, 6, 5, 2, 8, 14, 9, 13, 10, 7, 11},
             {5, 7, 0, 11, 12, 1, 9, 10, 15, 6, 2, 3, 8, 4, 13, 14},
             {12, 15, 11, 10, 4, 5, 14, 0, 13, 7, 1, 2, 9, 8, 3, 6},
             {6, 14, 10, 5, 15, 8, 7, 1, 3, 4, 2, 0, 12, 9, 11, 13},
             {14, 13, 4, 11, 15, 8, 6, 9, 0, 7, 3, 1, 2, 10, 12, 5},
             {14, 4, 0, 10, 6, 5, 1, 3, 9, 2, 13, 15, 12, 7, 8, 11},
             {15, 10, 8, 3, 0, 6, 9, 5, 1, 14, 13, 11, 7, 2, 12, 4},
             {0, 13, 2, 4, 12, 14, 6, 9, 15, 1, 10, 3, 11, 5, 8, 7},
             {3, 14, 13, 6, 4, 15, 8, 9, 5, 12, 10, 0, 2, 7, 1, 11},
             {0, 1, 9, 7, 11, 13, 5, 3, 14, 12, 4, 2, 8, 6, 10, 15},
             {11, 0, 15, 8, 13, 12, 3, 5, 10, 1, 4, 6, 14, 9, 7, 2},
             {13, 0, 9, 12, 11, 6, 3, 5, 15, 8, 1, 10, 4, 14, 2, 7},
             {14, 10, 2, 1, 13, 9, 8, 11, 7, 3, 6, 12, 15, 5, 4, 0},
             {12, 3, 9, 1, 4, 5, 10, 2, 6, 11, 15, 0, 14, 7, 13, 8},
             {15, 8, 10, 7, 0, 12, 14, 1, 5, 9, 6, 3, 13, 11, 4, 2},
             {4, 7, 13, 10, 1, 2, 9, 6, 12, 8, 14, 5, 3, 0, 11, 15},
             {6, 0, 5, 10, 11, 12, 9, 2, 1, 7, 4, 3, 14, 8, 13, 15},
             {9, 5, 11, 10, 13, 0, 2, 1, 8, 6, 14, 12, 4, 7, 3, 15},
             {15, 2, 12, 11, 14, 13, 9, 5, 1, 3, 8, 7, 0, 10, 6, 4},
             {11, 1, 7, 4, 10, 13, 3, 8, 9, 14, 0, 15, 6, 5, 2, 12},
             {5, 4, 7, 1, 11, 12, 14, 15, 10, 13, 8, 6, 2, 0, 9, 3},
             {9, 7, 5, 2, 14, 15, 12, 10, 11, 3, 6, 1, 8, 13, 0, 4},
             {3, 2, 7, 9, 0, 15, 12, 4, 6, 11, 5, 14, 8, 13, 10, 1},
             {13, 9, 14, 6, 12, 8, 1, 2, 3, 4, 0, 7, 5, 10, 11, 15},
             {5, 7, 11, 8, 0, 14, 9, 13, 10, 12, 3, 15, 6, 1, 4, 2},
             {4, 3, 6, 13, 7, 15, 9, 0, 10, 5, 8, 11, 2, 12, 1, 14},
             {1, 7, 15, 14, 2, 6, 4, 9, 12, 11, 13, 3, 0, 8, 5, 10},
             {9, 14, 5, 7, 8, 15, 1, 2, 10, 4, 13, 6, 12, 0, 11, 3},
             {0, 11, 3, 12, 5, 2, 1, 9, 8, 10, 14, 15, 7, 4, 13, 6},
             {7, 15, 4, 0, 10, 9, 2, 5, 12, 11, 13, 6, 1, 3, 14, 8},
             {11, 4, 0, 8, 6, 10, 5, 13, 12, 7, 14, 3, 1, 2, 9, 15}};
    if (instance < 0 || instance >= 100)
        return false;
    short result[16];
    for (int x = 0; x < 16; x++)
        result[x] = problems[instance][x];
    return result;
}

short* GetSTPInstance1(int instance)
{
    int problems[100][20] = {
            {8,10,9,12,11,14,13,16,15,17,19,18,4,2,3,0,1,7,6,5},
            {8,9,11,10,13,12,15,14,17,16,19,18,6,7,3,4,5,1,2,0},
            {12,14,13,17,16,19,18,15,0,1,4,3,2,6,5,9,8,7,11,10},
            {10,8,9,12,11,14,13,16,15,19,18,17,3,1,2,0,5,4,7,6},
            {8,10,9,12,11,14,13,16,15,17,19,18,6,7,4,5,1,2,3,0},
            {0,2,1,4,3,6,5,8,7,11,10,9,16,17,14,15,12,13,19,18},
            {16,17,12,14,13,15,19,18,2,4,3,0,1,6,5,9,8,7,11,10},
            {8,11,10,9,13,12,15,14,17,16,19,18,5,2,3,4,0,1,7,6},
            {0,9,2,1,4,3,6,5,8,7,11,10,12,19,14,13,16,15,18,17},
            {2,0,1,5,4,3,7,6,9,8,11,10,15,13,14,12,17,16,19,18},
            {0,2,1,4,3,6,5,9,8,7,11,10,19,17,18,15,16,13,14,12},
            {13,12,15,14,17,16,19,18,0,2,1,4,3,8,7,6,5,11,10,9},
            {3,4,0,2,1,7,6,5,9,8,12,11,10,14,13,15,17,16,19,18},
            {8,10,9,11,14,13,12,17,16,15,19,18,4,1,2,3,0,7,6,5},
            {17,15,16,13,14,12,19,18,8,9,6,7,4,5,2,3,0,1,11,10},
            {0,1,3,2,5,4,7,6,9,8,11,10,16,17,13,14,15,12,19,18},
            {13,14,12,17,16,15,19,18,2,3,0,1,5,4,7,6,9,8,11,10},
            {10,11,8,9,6,7,4,5,1,2,3,0,13,14,12,16,15,19,18,17},
            {12,19,14,13,16,15,18,17,3,4,0,2,1,6,5,9,8,7,11,10},
            {8,10,9,11,14,13,12,17,16,15,19,18,6,7,4,5,1,2,3,0},
            {8,11,10,13,12,15,14,17,16,9,19,18,0,1,3,2,5,4,7,6},
            {2,4,3,6,5,7,0,1,9,10,8,12,11,14,13,16,15,19,18,17},
            {5,2,3,4,0,1,7,6,19,17,18,15,16,12,13,14,10,11,8,9},
            {8,9,6,7,4,5,2,3,0,1,11,10,12,14,13,16,15,17,19,18},
            {8,9,11,10,13,12,16,15,14,19,18,17,5,3,4,1,2,0,7,6},
            {12,19,14,13,16,15,18,17,0,2,1,4,3,6,5,9,8,7,11,10},
            {8,10,9,12,11,14,13,16,15,19,18,17,0,2,1,4,3,6,5,7},
            {0,2,1,4,3,6,5,8,7,11,10,9,12,14,13,16,15,18,17,19},
            {15,13,14,12,18,17,16,19,4,5,2,3,0,1,7,6,9,8,11,10},
            {5,2,3,4,0,1,7,6,14,15,12,13,10,11,8,9,17,16,19,18},
            {0,3,2,5,4,1,7,6,8,10,9,11,13,12,15,14,17,16,19,18},
            {12,14,13,19,16,15,18,17,3,4,0,2,1,6,5,9,8,7,11,10},
            {8,10,9,11,14,13,12,17,16,15,19,18,0,1,7,5,6,3,4,2},
            {1,2,0,5,4,3,7,6,8,9,11,10,13,12,15,14,17,16,19,18},
            {16,17,12,14,13,15,19,18,0,3,2,5,4,7,6,9,8,1,11,10},
            {6,7,0,2,1,4,3,5,18,19,16,17,13,14,15,11,12,9,10,8},
            {18,19,12,14,13,16,15,17,10,11,8,9,5,6,7,3,4,1,2,0},
            {14,12,13,17,16,15,19,18,1,2,0,4,3,6,5,9,8,7,11,10},
            {13,12,15,14,17,16,19,18,0,2,1,4,3,7,6,5,10,9,8,11},
            {1,2,0,4,3,6,5,9,8,7,11,10,15,13,14,12,18,17,16,19},
            {1,2,0,4,3,6,5,9,8,7,11,10,12,14,13,16,15,18,17,19},
            {0,5,2,1,4,3,7,6,8,9,11,10,13,12,16,15,14,19,18,17},
            {3,1,2,0,5,4,7,6,8,10,9,12,11,16,15,14,13,19,18,17},
            {0,2,1,4,3,6,5,8,7,9,11,10,18,19,16,17,13,14,15,12},
            {4,6,5,7,1,2,3,0,10,11,8,9,13,12,15,14,17,16,19,18},
            {9,10,8,12,11,14,13,16,15,19,18,17,0,3,2,5,4,1,7,6},
            {2,0,1,5,4,3,7,6,9,8,11,10,13,12,16,15,14,17,19,18},
            {14,15,12,13,10,11,8,9,17,16,19,18,6,7,4,5,2,3,0,1},
            {0,7,2,1,4,3,6,5,9,10,8,12,11,14,13,16,15,19,18,17},
            {4,1,2,3,0,7,6,5,19,16,17,18,14,15,12,13,10,11,8,9},
            {1,0,4,3,2,6,5,8,7,9,11,10,12,15,14,17,16,13,19,18},
            {16,15,13,14,12,19,18,17,11,8,9,10,6,7,4,5,2,3,0,1},
            {13,11,12,9,10,8,15,14,17,16,19,18,0,5,2,1,4,3,7,6},
            {4,5,2,3,0,1,7,6,8,10,9,12,11,15,14,13,18,17,16,19},
            {0,2,1,4,3,6,5,7,8,10,9,12,11,14,13,16,15,19,18,17},
            {12,14,13,16,15,19,18,17,1,0,3,2,5,4,7,6,9,8,11,10},
            {2,3,0,1,5,4,7,6,9,8,11,10,12,19,14,13,16,15,18,17},
            {16,18,17,19,13,14,15,12,0,2,1,4,3,6,5,8,7,9,11,10},
            {12,14,13,16,15,18,17,19,0,2,1,4,3,6,5,8,7,10,9,11},
            {4,5,2,3,0,1,7,6,9,10,8,12,11,14,13,16,15,19,18,17},
            {12,14,13,15,17,16,19,18,10,11,8,9,6,7,4,5,1,2,3,0},
            {3,4,1,2,0,7,6,5,10,11,8,9,13,12,15,14,17,16,19,18},
            {8,10,9,11,13,12,15,14,17,16,19,18,2,4,3,5,0,1,7,6},
            {0,3,2,5,4,7,6,1,13,11,12,9,10,8,15,14,17,16,19,18},
            {5,3,4,1,2,0,7,6,16,17,14,15,12,13,10,11,8,9,19,18},
            {11,9,10,6,7,8,4,5,2,3,0,1,14,16,15,17,12,13,19,18},
            {13,11,12,9,10,8,15,14,17,16,19,18,4,2,3,0,1,7,6,5},
            {12,14,13,19,16,15,18,17,1,0,3,2,6,5,4,8,7,9,11,10},
            {8,9,12,11,10,14,13,17,16,15,19,18,7,4,5,6,1,2,3,0},
            {6,7,0,2,1,4,3,5,8,11,10,9,13,12,15,14,17,16,19,18},
            {11,12,8,10,9,14,13,17,16,15,19,18,0,2,1,4,3,6,5,7},
            {2,3,0,1,5,4,7,6,10,11,8,9,13,12,15,14,17,16,19,18},
            {7,5,6,2,3,4,0,1,18,19,16,17,14,15,11,12,13,9,10,8},
            {6,7,4,5,2,3,0,1,9,8,11,10,12,14,13,17,16,15,19,18},
            {4,6,5,7,1,2,3,0,8,9,11,10,13,12,16,15,14,19,18,17},
            {0,1,3,2,5,4,7,6,9,8,11,10,12,13,15,14,17,16,19,18},
            {8,10,9,11,14,13,12,17,16,15,19,18,4,2,3,0,1,7,6,5},
            {17,14,15,16,12,13,19,18,1,0,4,3,2,6,5,7,9,8,11,10},
            {5,3,4,1,2,0,7,6,9,8,11,10,16,17,13,14,15,12,19,18},
            {19,16,17,18,12,14,13,15,1,0,3,2,6,5,4,8,7,9,11,10},
            {0,1,3,2,6,5,4,9,8,7,11,10,19,17,18,15,16,13,14,12},
            {4,5,0,2,1,3,7,6,18,19,16,17,14,15,11,12,13,9,10,8},
            {0,2,1,4,3,6,5,9,8,7,11,10,12,13,15,14,17,16,19,18},
            {12,13,15,14,17,16,19,18,2,4,3,0,1,6,5,9,8,7,11,10},
            {1,2,0,4,3,7,6,5,9,8,11,10,15,16,13,14,12,19,18,17},
            {1,2,0,4,3,6,5,9,8,7,11,10,14,16,15,18,17,19,12,13},
            {4,2,3,1,0,7,6,5,8,9,11,10,13,12,16,15,14,19,18,17},
            {0,3,2,5,4,7,6,9,8,1,11,10,13,12,15,14,17,16,19,18},
            {0,2,1,4,3,7,6,5,9,8,11,10,12,14,13,16,15,18,17,19},
            {9,10,8,12,11,14,13,17,16,15,19,18,6,7,4,5,1,2,3,0},
            {2,0,1,4,3,6,5,8,7,11,10,9,16,18,17,19,13,14,15,12},
            {11,9,10,8,13,12,15,14,17,16,19,18,3,4,1,2,0,7,6,5},
            {13,12,15,14,17,16,19,18,1,2,0,4,3,7,6,5,9,8,11,10},
            {0,3,2,1,5,4,7,6,8,10,9,11,13,12,16,15,14,19,18,17},
            {0,2,1,4,3,8,7,6,5,11,10,9,16,15,13,14,12,19,18,17},
            {0,3,2,1,5,4,7,6,9,8,11,10,19,16,17,18,14,15,12,13},
            {1,0,3,2,5,4,8,7,6,9,11,10,19,16,17,18,13,14,15,12},
            {0,9,2,1,4,3,6,5,8,7,11,10,18,19,15,16,17,13,14,12},
            {0,2,1,3,5,4,7,6,10,8,9,13,12,11,15,14,17,16,19,18},
            {18,19,16,17,14,15,11,12,13,9,10,8,3,4,1,2,0,7,6,5}};
    if (instance < 0 || instance >= 100)
        return false;
    short result[20];
    for (int x = 0; x < 20; x++)
        result[x] = problems[instance][x];
    return result;
}

short* GetSTPInstance2(int instance)
{
    int problems[100][24] = {
            {8,10,9,15,12,11,14,13,16,18,17,20,19,23,22,21,0,2,1,4,3,7,6,5},
            {16,19,18,21,20,17,23,22,7,5,6,3,4,1,2,0,8,10,9,11,13,12,15,14},
            {8,10,9,12,11,14,13,15,20,21,16,18,17,19,23,22,1,2,0,4,3,7,6,5},
            {1,2,0,4,3,7,6,5,23,20,21,22,18,19,16,17,14,15,8,10,9,12,11,13},
            {1,0,3,2,5,4,7,6,8,10,9,12,11,14,13,15,20,19,17,18,16,23,22,21},
            {4,5,0,2,1,3,7,6,13,11,12,9,10,8,15,14,18,20,19,21,16,17,23,22},
            {8,10,9,12,11,13,15,14,16,18,17,21,20,19,23,22,4,2,3,0,1,7,6,5},
            {4,1,2,3,0,7,6,5,9,8,11,10,13,12,15,14,17,16,19,18,21,20,23,22},
            {0,2,1,3,5,4,7,6,11,9,10,8,13,12,15,14,20,19,17,18,16,23,22,21},
            {16,18,17,20,19,23,22,21,2,3,0,1,5,4,7,6,9,8,11,10,13,12,15,14},
            {4,5,0,2,1,3,7,6,9,8,11,10,13,12,15,14,16,18,17,20,19,22,21,23},
            {0,5,2,1,4,3,7,6,11,9,10,8,13,12,15,14,19,17,18,16,21,20,23,22},
            {0,2,1,5,4,7,6,3,8,10,9,12,11,14,13,15,18,20,19,22,21,23,16,17},
            {0,1,3,2,5,4,7,6,8,10,9,11,13,12,15,14,18,16,17,21,20,19,23,22},
            {4,5,0,2,1,3,7,6,9,8,11,10,13,12,15,14,16,18,17,19,21,20,23,22},
            {7,5,6,3,4,1,2,0,8,10,9,13,12,15,14,11,16,18,17,20,19,22,21,23},
            {16,18,17,23,20,19,22,21,7,5,6,3,4,1,2,0,8,10,9,11,13,12,15,14},
            {0,2,1,5,4,3,7,6,8,10,9,12,11,13,15,14,23,20,21,22,17,18,19,16},
            {1,0,3,2,5,4,7,6,11,9,10,8,13,12,15,14,23,21,22,19,20,17,18,16},
            {8,10,9,11,13,12,15,14,6,7,4,5,2,3,0,1,16,18,17,20,19,22,21,23},
            {4,6,5,7,1,2,3,0,12,9,10,11,8,15,14,13,17,16,19,18,21,20,23,22},
            {16,18,17,19,21,20,23,22,14,15,12,13,10,11,8,9,3,1,2,0,7,6,5,4},
            {0,3,2,5,4,7,6,1,8,10,9,12,11,13,15,14,16,18,17,20,19,22,21,23},
            {20,21,16,18,17,19,23,22,1,0,3,2,5,4,7,6,11,9,10,8,13,12,15,14},
            {4,5,2,3,0,1,7,6,8,10,9,12,11,13,15,14,18,20,19,22,21,23,16,17},
            {3,1,2,0,5,4,7,6,9,10,8,12,11,15,14,13,19,17,18,16,23,22,21,20},
            {9,8,11,10,13,12,15,14,16,18,17,20,19,22,21,23,4,2,3,1,0,7,6,5},
            {8,10,9,12,11,14,13,15,18,20,19,21,16,17,23,22,0,3,2,1,5,4,7,6},
            {8,10,9,12,11,14,13,15,18,20,19,21,16,17,23,22,0,2,1,4,3,6,5,7},
            {0,2,1,3,5,4,7,6,23,21,22,19,20,17,18,16,14,15,8,10,9,12,11,13},
            {9,10,8,13,12,11,15,14,17,16,19,18,21,20,23,22,0,2,1,4,3,7,6,5},
            {1,0,3,2,5,4,7,6,8,9,11,10,13,12,15,14,20,21,18,19,16,17,23,22},
            {9,10,8,13,12,11,15,14,17,16,19,18,21,20,23,22,1,0,4,3,2,5,7,6},
            {16,18,17,20,19,22,21,23,0,2,1,4,3,6,5,7,10,12,11,14,13,15,8,9},
            {5,3,4,1,2,0,7,6,8,10,9,13,12,11,15,14,16,18,17,20,19,21,23,22},
            {0,1,3,2,5,4,7,6,10,12,11,13,8,9,15,14,16,18,17,20,19,21,23,22},
            {8,9,11,10,13,12,15,14,18,20,19,21,16,17,23,22,0,2,1,4,3,7,6,5},
            {4,3,1,2,0,7,6,5,23,20,21,22,18,19,16,17,14,15,8,10,9,12,11,13},
            {14,15,12,13,9,10,11,8,16,18,17,20,19,21,23,22,0,3,2,5,4,1,7,6},
            {8,10,9,12,11,14,13,15,20,21,16,18,17,19,23,22,0,2,1,3,5,4,7,6},
            {8,10,9,12,11,13,15,14,16,18,17,21,20,19,23,22,0,2,1,5,4,7,6,3},
            {20,22,21,23,17,18,19,16,2,3,0,1,5,4,7,6,9,8,11,10,13,12,15,14},
            {7,4,5,6,2,3,0,1,8,10,9,12,11,14,13,15,18,20,19,22,21,23,16,17},
            {0,1,3,2,5,4,7,6,11,9,10,8,13,12,15,14,20,21,16,18,17,19,23,22},
            {1,0,3,2,5,4,7,6,11,9,10,8,13,12,15,14,20,21,17,18,19,16,23,22},
            {9,10,8,13,12,11,15,14,17,16,19,18,21,20,23,22,6,7,4,5,2,3,0,1},
            {19,17,18,16,22,21,20,23,0,1,3,2,5,4,7,6,8,10,9,11,13,12,15,14},
            {18,20,19,16,17,23,22,21,1,2,0,4,3,7,6,5,9,8,11,10,13,12,15,14},
            {16,18,17,20,19,22,21,23,15,13,14,11,12,9,10,8,0,2,1,4,3,5,7,6},
            {4,6,5,7,1,2,3,0,8,10,9,13,12,15,14,11,16,18,17,20,19,22,21,23},
            {23,20,21,22,18,19,16,17,0,1,3,2,5,4,7,6,10,12,11,13,8,9,15,14},
            {16,18,17,19,21,20,23,22,0,2,1,3,5,4,7,6,11,9,10,8,13,12,15,14},
            {3,1,2,0,7,6,5,4,8,10,9,15,12,11,14,13,16,18,17,20,19,23,22,21},
            {20,21,17,18,19,16,23,22,4,1,2,3,0,7,6,5,9,8,11,10,13,12,15,14},
            {16,18,17,20,19,22,21,23,0,2,1,3,5,4,7,6,11,9,10,8,13,12,15,14},
            {0,2,1,5,4,3,7,6,8,10,9,12,11,13,15,14,16,18,17,20,19,23,22,21},
            {20,18,19,17,16,23,22,21,0,2,1,7,4,3,6,5,8,10,9,12,11,15,14,13},
            {0,3,2,1,5,4,7,6,9,8,11,10,13,12,15,14,16,18,17,20,19,22,21,23},
            {4,1,2,3,0,7,6,5,9,8,11,10,13,12,15,14,16,18,17,23,20,19,22,21},
            {8,9,11,10,13,12,15,14,19,17,18,16,21,20,23,22,7,4,5,6,2,3,0,1},
            {0,2,1,4,3,6,5,7,16,18,17,20,19,22,21,23,15,13,14,11,12,9,10,8},
            {16,18,17,21,20,19,23,22,5,3,4,1,2,0,7,6,10,12,11,13,8,9,15,14},
            {22,23,20,21,18,19,16,17,1,0,3,2,5,4,7,6,8,10,9,13,12,11,15,14},
            {20,21,17,18,19,16,23,22,0,2,1,5,4,3,7,6,8,10,9,12,11,13,15,14},
            {18,16,17,21,20,19,23,22,1,0,3,2,5,4,7,6,11,9,10,8,13,12,15,14},
            {6,7,4,5,2,3,0,1,8,10,9,12,11,15,14,13,20,21,16,18,17,19,23,22},
            {4,5,1,2,3,0,7,6,9,8,11,10,13,12,15,14,16,18,17,20,19,21,23,22},
            {8,10,9,12,11,15,14,13,20,21,16,18,17,19,23,22,0,2,1,7,4,3,6,5},
            {9,10,8,12,11,15,14,13,17,16,19,18,21,20,23,22,0,2,1,4,3,5,7,6},
            {8,10,9,12,11,14,13,15,20,21,16,18,17,19,23,22,4,1,2,3,0,7,6,5},
            {0,2,1,3,5,4,7,6,11,9,10,8,13,12,15,14,18,19,16,17,21,20,23,22},
            {20,18,19,17,16,23,22,21,3,1,2,0,5,4,7,6,11,9,10,8,13,12,15,14},
            {7,5,6,3,4,1,2,0,16,23,18,17,20,19,22,21,14,15,12,13,10,11,8,9},
            {8,10,9,12,11,15,14,13,16,18,17,20,19,21,23,22,0,1,3,2,5,4,7,6},
            {0,1,3,2,5,4,7,6,15,13,14,11,12,9,10,8,16,18,17,19,21,20,23,22},
            {1,0,3,2,5,4,7,6,8,10,9,12,11,14,13,15,19,17,18,16,21,20,23,22},
            {8,15,10,9,12,11,14,13,6,7,4,5,2,3,0,1,18,16,17,20,19,23,22,21},
            {8,10,9,12,11,13,15,14,16,18,17,20,19,22,21,23,0,2,1,5,4,3,7,6},
            {23,21,22,19,20,17,18,16,5,3,4,1,2,0,7,6,10,12,11,13,8,9,15,14},
            {16,23,18,17,20,19,22,21,0,1,3,2,5,4,7,6,11,9,10,8,13,12,15,14},
            {8,10,9,12,11,13,15,14,22,23,16,18,17,20,19,21,3,4,1,2,0,7,6,5},
            {0,3,2,1,5,4,7,6,8,10,9,12,11,14,13,15,18,20,19,21,16,17,23,22},
            {15,13,14,11,12,9,10,8,6,7,0,2,1,4,3,5,23,20,21,22,18,19,16,17},
            {7,5,6,3,4,1,2,0,11,9,10,8,13,12,15,14,17,18,16,20,19,23,22,21},
            {23,21,22,19,20,17,18,16,14,15,8,10,9,12,11,13,0,2,1,4,3,6,5,7},
            {23,21,22,18,19,20,16,17,0,2,1,3,5,4,7,6,11,9,10,8,13,12,15,14},
            {10,12,11,14,13,15,8,9,6,7,4,5,1,2,3,0,16,21,18,17,20,19,23,22},
            {22,23,16,18,17,20,19,21,8,10,9,11,13,12,15,14,6,7,4,5,2,3,0,1},
            {16,18,17,21,20,23,22,19,0,2,1,4,3,7,6,5,8,10,9,12,11,13,15,14},
            {0,2,1,5,4,7,6,3,9,8,11,10,13,12,15,14,16,18,17,21,20,19,23,22},
            {0,2,1,4,3,6,5,7,13,10,11,12,8,9,15,14,20,18,19,16,17,23,22,21},
            {7,4,5,6,0,2,1,3,8,10,9,12,11,13,15,14,16,18,17,21,20,19,23,22},
            {15,13,14,11,12,9,10,8,6,7,0,2,1,4,3,5,23,20,21,22,17,18,19,16},
            {16,23,18,17,20,19,22,21,6,7,4,5,1,2,3,0,8,10,9,12,11,13,15,14},
            {0,2,1,3,5,4,7,6,12,13,10,11,8,9,15,14,16,23,18,17,20,19,22,21},
            {21,19,20,17,18,16,23,22,1,2,0,5,4,3,7,6,9,8,11,10,13,12,15,14},
            {15,13,14,11,12,9,10,8,0,2,1,4,3,6,5,7,16,18,17,21,20,19,23,22},
            {1,0,4,3,2,5,7,6,14,15,12,13,9,10,11,8,16,18,17,20,19,21,23,22},
            {0,2,1,4,3,5,7,6,8,10,9,12,11,14,13,15,16,18,17,20,19,22,21,23},
            {8,10,9,15,12,11,14,13,16,18,17,20,19,23,22,21,4,5,2,3,0,1,7,6}};
    if (instance < 0 || instance >= 100)
        return false;
    short result[25] = {0};
    for (int x = 0; x < 24; x++)
        result[x] = problems[instance][x];
    result[24] = 24;
    return result;
}

void STPOpReOrder(vector<STPnode2> &a, int order, int useless){
    if(order == 0) return;
    if(a.size() <= 1) return;
    if(a.size() == 2){
        if(order<=2) return;
        STPnode2 newA(a[1]);
        a[1] = a[0];
        a[0] = newA;
    }
    else if(a.size() == 3){
        int i;
        int indexes[3];
        vector<STPnode2> newA(a);
        for(i=2; i>=0; i--){
            if(i==0){
                indexes[2-i] = order/1;
                order = order%1;
            }
            else{
                indexes[2-i] = order/i;
                order = order%i;
            }
            //cout<<indexes[2-i]<<" ";
        }
        for(i=0; i<3; i++){
            for(int j=i+1;j<3;j++){
                if(indexes[j] >= indexes[i]){
                    indexes[j]++;
                }
            }
        }
        for(i=0; i<3; i++){
            newA[i] = a[indexes[i]];
            //cout<<indexes[i]<<" ";
        }
        //cout<<endl;
        for(i=0; i<3; i++){
            a[i] = newA[i];
        }
    }
    else{
        //a.size() == 4, do nothing, only happen for start point
        return;
    }
}

void pancakeOpReOrder(vector<pancake> &a, int order, int first){
    if(order == 0) return;
    vector<pancake> newA(a);
    int indexes[14];
    int factori;
    indexes[0] = first;
    for(int i=12; i>=0; i--){
        factori = factor(i, 1);
        indexes[13-i] = order/factori;
        order = order%factori;
    }
    for(int i=1; i<14; i++){
        //cout<<indexes[i]<<" ";
        for(int j=i+1; j<14;j++){
            if(indexes[j] >= indexes[i]){
                indexes[j]++;
            }
        }
    }
    //cout<<endl;
    for(int i=0; i<13; i++){
        if(indexes[i] >= indexes[0]) indexes[i]++;
        //cout<<indexes[i]<<" ";
        newA[i] = a[indexes[i]];
    }
    for(int i=0; i<13; i++){
        a[i] = newA[i];
    }
}

class IDA{
private:
    //we don't store neighbours so we cache the vector
    int expandedNode;
    int fcostLimit;
    int nextFcost;
    int weight;
    int order;
    int order1;
    // in these two problem space, we are always using int f-cost


public:
	IDA(int newWeight, int newOrder, int orderFirst){
        expandedNode = 0;
        fcostLimit = 999999;
        nextFcost = 999999;
        weight = newWeight;
        order = newOrder;
        order1 = orderFirst;
	}

    void operator()(STPnode2 start){
	    IDAsearch(start);
    }

    bool IDAsearch(STPnode2 start){
        fcostLimit = weight*start.heuristic + start.gcost;
        bool found;
        auto start_time = std::chrono::steady_clock::now();
        while(true){
            found = this->search(start);
            if(found){
                findRes = true;
                auto end_time = std::chrono::steady_clock::now();
                std::chrono::duration<double> elapsed_seconds = end_time-start_time;
                cout<<"result for WIDA* with weight "<<weight<<endl;
                cout<<"finish in: "<<double(elapsed_seconds.count())<<" seconds."<<endl;
                cout<<"find cost = "<<this->fcostLimit<<endl;
                cout<<"expanded node is: "<<expandedNode<<endl;
                expNode = expandedNode;
                usedTime = double(elapsed_seconds.count());
                weightCount[weight-2]++;
                return true;
            }
            else{
                if (fcostLimit == nextFcost){
                    //cout<<"nextFcost does not change, cannot find goal."<<endl;
                    //cout<<fcostLimit<<endl;
                    //findRes = true;
                    return false;
                }
                //cout<<fcostLimit<<endl;
                fcostLimit = nextFcost;
                nextFcost = 999999;
            }
        }
	}

    bool search(STPnode2 start){
	    if (start.isGoal()){
	        //start.print();
	        return true;
	    }
        if(findRes){ return false;}
	    //start.print();
	    //cout<<start.heuristic<<endl;
        //if(start.heuristic == 2) start.print();
        expandedNode++;
        vector<STPnode2> neigh(start.getNeigh());

        STPOpReOrder(neigh, order, order1);

		for(int i = 0; i < neigh.size(); i++){
		    int childFcost = weight*neigh[i].heuristic + neigh[i].gcost;
			if(childFcost > this->fcostLimit){
                if(childFcost < this->nextFcost)
                    this->nextFcost = childFcost;
            }
			else{
			    bool found = this->search(neigh[i]);
			    if(found) return true;
			}
		}
		return false;
	}
};

bool cmp(STPnode1 x,STPnode1 y){
    //if(x.fcost == y.fcost)
    //    return x.gcost > y.gcost;
    // these code is meaningless because we are always sorting between the children of a parent
    // and we always have unit g-cost here
    return x.fcost < y.fcost;
}

class RBFS{
private:
    int weight;
    int order;
    int order1;
    int expandedNode;
public:
    RBFS(int newWeight, int newOrder, int orderFirst){
        weight = newWeight;
        order = newOrder;
        order1 = orderFirst;
        expandedNode = 0;
    }

    void operator()(STPnode1 start){
        RBFSsearch(start);
    }

    bool RBFSsearch(STPnode1 start){
        start.fcost = weight*start.heuristic + start.gcost;
        auto start_time = std::chrono::steady_clock::now();
        int result = search(start, 999999);
        auto end_time = std::chrono::steady_clock::now();

        std::chrono::duration<double> elapsed_seconds = end_time-start_time;

        if(result == 999999){return false;}
        else if(result == -1){
            findRes = true;
            cout<<"result for WRBFS with weight "<<weight<<endl;
            cout<<"finish in: "<<double(elapsed_seconds.count())<<" seconds."<<endl;
            cout<<"expanded node is: "<<expandedNode<<endl;
            expNode = expandedNode;
            usedTime = double(elapsed_seconds.count());
            weightCount[weight-2]++;
            return true;
        }
        else{
            cout<<"wrong!!"<<endl;
            return false;
        }
        //9999 refers to infinite
    }

    int search(STPnode1 start, const int fcostLimit){

        if(start.isGoal()){
            cout<<"find gcost is: "<<start.gcost<<endl;
            return -1;
        }
        //-1 represent success!!!!
        //any positive or 0 value refers to a f-limit, which means it does not find.

        if(findRes){ ExitThread(0);return 999999;}
        //why can i exit a thread of search like this???, I understand why I can exit with return 999999;

        expandedNode++;
        vector<STPnode1> neigh(start.getNeigh());
        int neighNum = neigh.size();
        if(neighNum == 0){return 999999;}

        //STPOpReOrder(neigh, order, order1);
        //need to disable this when not running this algorithm
        //cout<<"finish reorder"<<endl;

        int startFcost = weight*start.heuristic + start.gcost;
        //no update when weight=1 (for upper one)
        startFcost = start.fcost;
        //has updated when weight=1 (for this one), because we update the f-cost of parent

        for(int i = 0; i < neighNum; i++){
            neigh[i].fcost = weight*neigh[i].heuristic + neigh[i].gcost;
            if(neigh[i].fcost < startFcost){
                neigh[i].fcost = startFcost;
            }
        }
        //pathmax, from parent to children, do not care about heuristic

        while(true){
            stable_sort(neigh.begin(), neigh.end(), cmp);
            if(neigh[0].fcost > fcostLimit || neigh[0].fcost == 999999){
                return neigh[0].fcost;
                //neighs is sorted. So we can just return if we find its the smallest one.
            }
            else{
                int alternative = 999999;
                if (neighNum != 1){
                    alternative = neigh[1].fcost;
                }
                int found = this->search(neigh[0], min(fcostLimit, alternative));
                if(found == -1) return -1;
                neigh[0].fcost = found;
                //pathmax (not exactly) from children to parent, do not care about heuristic
            }
        }
    }
};

int main()
{
	cout<<"INIT"<<endl;
	short startState[16] = {0, 2, 1, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15};
	short easySTP[16] = {14 ,1 ,9 ,6 ,4 ,8 ,12 ,5 ,7 ,2 ,3 ,0 ,10 ,11 ,13 ,15};
	short hardPancake[16] = {11,9,10,8,15,14,13,12,6,7,4,5,2,3,0,1};

	readPDB();

	bool dovetailing = true;
    bool doveOp = true;

	int totalExp = 0;
	double TotalUsedTime = 0;

    srand((unsigned)time(0));

    for(int i=0; i<100; i++){
        STPnode2 a(0, GetSTPInstance2(i), 999);
        //STP is 4x4 STP, STP1 is 4x5 STP, STP2 is 5x5 STP, pancake is 16 pancake.
        vector<thread> threads;
        findRes = false;

        int startweight = 5, endweight = 5, opNum = 1;
        if(dovetailing){
            startweight = 2;
            endweight = 12;
        }
        if(doveOp){
            opNum = 6;
            //STP: opNum = 6;, pancake: opNum: 13
        }

        usedTime = 0;
        expNode = 0;
        for(int j=startweight; j<=endweight; j++){
            for(int k=0; k<opNum; k++){
                //rand()%factor(opNum,1);
                IDA newSearch(j, k, k);
                //first refers to weight, second refers to order.
                threads.push_back(thread(newSearch, a));
                //threads[(j-startweight)*opNum + k].detach();
            }
        }
	    for(int j=0; j < (endweight - startweight + 1)*opNum; j++){
	        threads[j].join();
	        // I better not have more than 16 threads!!!
	    }
	    while(!findRes){}
	    //for(int m=0; m<100000000;m++){}
        totalExp += expNode;
        TotalUsedTime += usedTime;
    }

    cout<<"result sum: "<<endl;
    cout<<"average used time is: "<<(TotalUsedTime/100.0)<<endl;
    cout<<"average expanded node is:"<<(double(totalExp)/100.0)<<endl;
    auto maxCount = max_element(weightCount.begin(),weightCount.end());
    int maxWeightCount = distance(begin(weightCount), maxCount);
    cout<<"mostly used weight is:"<<maxWeightCount+2<<". And the appear time is: "<<*maxCount<<endl;
    
    return 0;
}
